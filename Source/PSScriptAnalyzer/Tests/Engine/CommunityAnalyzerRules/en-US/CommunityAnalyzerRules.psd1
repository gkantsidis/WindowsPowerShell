ConvertFrom-StringData @'
# English strings
MeasureRequiresRunAsAdministrator = The #Requires statement prevents a script from running unless the Windows PowerShell version, modules, snap-ins, and module and snap-in version prerequisites are met. From Windows PowerShell 4.0, the #Requires statement let script developers require that sessions be run with elevated user rights (run as Administrator). Script developers does not need to write their own methods any more. To fix a violation of this rule, please consider to use #Requires -RunAsAdministrator instead of your own methods.
MeasureRequiresModules            = The #Requires statement prevents a script from running unless the Windows PowerShell version, modules, snap-ins, and module and snap-in version prerequisites are met. From Windows PowerShell 3.0, the #Requires statement let script developers specify Windows PowerShell modules that the script requires. To fix a violation of this rule, please consider to use #Requires -RunAsAdministrator instead of using Import-Module.
MeasureLongClassName              = When interacting with classes that have long type names, you want to reduce the amount of redundant information in your script. To fix a violation of this rule, please store the type name in a variable or using -f operator. For example: $namespace = "System.Collections.{0}"; $arrayList = New-Object ($namespace -f "ArrayList"); $queue = New-Object ($namespace -f "Queue")
MeasureDeprecatedWMIClass         = With the release of new Microsoft Windows, some WMI classes are marked as deprecated. When writing Windows PowerShell scripts, you should not use these WMI classes. You can run this command to get the deprecated WMI classes list, "Get-CimClass * -QualifierName deprecated". To fix a violation of this rule, please do not use the deprecated WMI classes in your script.
MeasureComObject                  = If you can't use just PowerShell, use .NET, external commands or COM objects, in that order of preference. COM objects are rarely well-documented, making them harder for someone else to research and understand. They do not always work flawlessly in PowerShell, as they must be used through .NET's Interop layer, which isn't 100% perfect. To fix a violation of this rule, please do not use COM objects when calling New-Object.
MeasureCurlyBracket               = In general, you should avoid creating deeply nested structures, but sometimes they cannot be avoided. The use of end-of-line comments with closing curly brackets can greatly improve the readability and maintainability of your script. To fix a violation of this rule, please add comment after closing curly bracket for deeply nested structures.
MeasureOverComment                = Don't precede each line of code with a comment. Doing so breaks up the code and makes it harder to follow. A well-written PowerShell command, with full command and parameter names, can be pretty self-explanatory. Don’t comment-explain it unless it isn’t self-explanatory.To fix a violation of this rule, please remove these unnecessary comments.
MeasureBacktick                   = In general, the community feels you should avoid using those backticks as “line continuation characters” when possible. They’re hard to read, easy to miss, and easy to mis-type. Also, if you add an extra whitespace after the backtick in the above example, then the command won’t work. To fix a violation of this rule, please remove backticks from your script and use "splatting" instead. You can run "Get-Help about_splatting" to get more details.
MeasureWriteHost                  = It is generally accepted that you should never use Write-Host to create any script output whatsoever, unless your script (or function, or whatever) uses the Show verb (as in, Show-Performance). That verb explicitly means “show on the screen, with no other possibilities.” Like Show-Command. To fix a violation of this rule, please replace Write-Host with Write-Output in most scenarios.
MeasureErrorActionPreference      = When executing something other than a cmdlet, set $ErrorActionPreference='Stop' before executing, and reset to Continue afterwards. Please don’t change $ErrorActionPreference persistently. To fix a violation of this rule, please reset $ErrorActionPreference to continue.
MeasureQuestionVariable           = When you need to examine the error that occurred, try to avoid using $?. It actually doesn’t mean an error did or did not occur; it’s reporting whether or not the last-run command considered itself to have completed successfully. You get no details on what happened. To fix a violation of this rule, please consider to use try-catch-finally statements.
MeasureHelpNote                   = Comment-based help is written as a series of comments. You can write comment-based help topics for end users to better understand your functions. Additionally, it’s better to explain the detail about how the function works. To fix a violation of this rule, add a .NOTE keyword in your comment-based help. You can get more details by running “Get-Help about_Comment_Based_Help” command in Windows PowerShell.
'@