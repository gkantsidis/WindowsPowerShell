//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using ComputerName Hardcoded.
        /// </summary>
        internal static string AvoidComputerNameHardcodedCommonName {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ComputerName parameter of a cmdlet should not be hardcoded as this will expose sensitive information about the system..
        /// </summary>
        internal static string AvoidComputerNameHardcodedDescription {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ComputerName parameter of cmdlet &apos;{0}&apos; is hardcoded. This will expose sensitive information about the system if the script is shared..
        /// </summary>
        internal static string AvoidComputerNameHardcodedError {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingComputerNameHardcoded.
        /// </summary>
        internal static string AvoidComputerNameHardcodedName {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch Parameters Should Not Default To True.
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterCommonName {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch parameter should not default to true..
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterDescription {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; has a switch parameter default to true..
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterError {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidDefaultValueSwitchParameter.
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterName {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty catch block is used. Please use Write-Error or throw statements in catch blocks..
        /// </summary>
        internal static string AvoidEmptyCatchBlockError {
            get {
                return ResourceManager.GetString("AvoidEmptyCatchBlockError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Global Variables.
        /// </summary>
        internal static string AvoidGlobalVarsCommonName {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that global variables are not used. Global variables are strongly discouraged as they can cause errors across different systems..
        /// </summary>
        internal static string AvoidGlobalVarsDescription {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found global variable &apos;{0}&apos;..
        /// </summary>
        internal static string AvoidGlobalVarsError {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidGlobalVars.
        /// </summary>
        internal static string AvoidGlobalVarsName {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Invoking Empty Members.
        /// </summary>
        internal static string AvoidInvokingEmptyMembersCommonName {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoking non-constant members would cause potential bugs. Please double check the syntax to make sure members invoked are non-constant..
        /// </summary>
        internal static string AvoidInvokingEmptyMembersDescription {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has non-constant members. Invoking non-constant members may cause bugs in the script..
        /// </summary>
        internal static string AvoidInvokingEmptyMembersError {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidInvokingEmptyMembers.
        /// </summary>
        internal static string AvoidInvokingEmptyMembersName {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using ShouldContinue Without Boolean Force Parameter.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceCommonName {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions that use ShouldContinue should have a boolean force parameter to allow user to bypass it..
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceDescription {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function &apos;{0}&apos; in file &apos;{1}&apos; uses ShouldContinue but does not have a boolean force parameter. The force parameter will allow users of the script to bypass ShouldContinue prompt.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceError {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidShouldContinueWithoutForce.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceName {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No traps in the script..
        /// </summary>
        internal static string AvoidTrapStatementCommonName {
            get {
                return ResourceManager.GetString("AvoidTrapStatementCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using Traps in the script..
        /// </summary>
        internal static string AvoidTrapStatementDescription {
            get {
                return ResourceManager.GetString("AvoidTrapStatementDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trap found..
        /// </summary>
        internal static string AvoidTrapStatementError {
            get {
                return ResourceManager.GetString("AvoidTrapStatementError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidTrapStatement.
        /// </summary>
        internal static string AvoidTrapStatementName {
            get {
                return ResourceManager.GetString("AvoidTrapStatementName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing non-global variables.
        /// </summary>
        internal static string AvoidUninitializedVariableCommonName {
            get {
                return ResourceManager.GetString("AvoidUninitializedVariableCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-global variables must be initialized. To fix a violation of this rule, please initialize non-global variables..
        /// </summary>
        internal static string AvoidUninitializedVariableDescription {
            get {
                return ResourceManager.GetString("AvoidUninitializedVariableDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; is not initialized. Non-global variables must be initialized. To fix a violation of this rule, please initialize non-global variables..
        /// </summary>
        internal static string AvoidUninitializedVariableError {
            get {
                return ResourceManager.GetString("AvoidUninitializedVariableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUninitializedVariable.
        /// </summary>
        internal static string AvoidUninitializedVariableName {
            get {
                return ResourceManager.GetString("AvoidUninitializedVariableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module Must Be Loadable.
        /// </summary>
        internal static string AvoidUnloadableModuleCommonName {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a script file is in a PowerShell module folder, then that folder must be loadable..
        /// </summary>
        internal static string AvoidUnloadableModuleDescription {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load the module &apos;{0}&apos; that file &apos;{1}&apos; is in..
        /// </summary>
        internal static string AvoidUnloadableModuleError {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUnloadableModule.
        /// </summary>
        internal static string AvoidUnloadableModuleName {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Username and Password Parameters.
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsCommonName {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions should only take in a credential parameter of type PSCredential instead of username and password parameters..
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsDescription {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function &apos;{0}&apos; has both username and password parameters. A credential parameter of type PSCredential should be used..
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsError {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingUserNameAndPassWordParams.
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsName {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Clear-Host.
        /// </summary>
        internal static string AvoidUsingClearHostCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Clear-Host is not recommended because the cmdlet may not work in some hosts or there may even be no hosts at all..
        /// </summary>
        internal static string AvoidUsingClearHostDescription {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses Clear-Host. This is not recommended because it may not work in some hosts or there may even be no hosts at all..
        /// </summary>
        internal static string AvoidUsingClearHostError {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingClearHost.
        /// </summary>
        internal static string AvoidUsingClearHostName {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Cmdlet Aliases.
        /// </summary>
        internal static string AvoidUsingCmdletAliasesCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An alias is an alternate name or nickname for a cmdlet or for a command element, such as a function, script, file, or executable file. But when writing scripts that will potentially need to be maintained over time, either by the original author or another Windows PowerShell scripter, please consider using full cmdlet name instead of alias. Aliases can introduce these problems, readability, understandability and availability..
        /// </summary>
        internal static string AvoidUsingCmdletAliasesDescription {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is an alias of &apos;{1}&apos;. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content..
        /// </summary>
        internal static string AvoidUsingCmdletAliasesError {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingCmdletAliases.
        /// </summary>
        internal static string AvoidUsingCmdletAliasesName {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses Console.&apos;{1}&apos;. Using Console to write is not recommended because it may not work in all hosts or there may even be no hosts at all. Use Write-Output instead..
        /// </summary>
        internal static string AvoidUsingConsoleWriteError {
            get {
                return ResourceManager.GetString("AvoidUsingConsoleWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using SecureString With Plain Text.
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using ConvertTo-SecureString with plain text will expose secure information..
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextDescription {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses ConvertTo-SecureString with plaintext. This will expose secure information. Encrypted standard strings should be used instead..
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextError {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingConvertToSecureStringWithPlainText.
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextName {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Deprecated Manifest Fields.
        /// </summary>
        internal static string AvoidUsingDeprecatedManifestFieldsCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingDeprecatedManifestFieldsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;ModuleToProcess&quot; is obsolete in the latest PowerShell version. Please update with the latest field &quot;RootModule&quot; in manifest files to avoid PowerShell version inconsistency..
        /// </summary>
        internal static string AvoidUsingDeprecatedManifestFieldsDescription {
            get {
                return ResourceManager.GetString("AvoidUsingDeprecatedManifestFieldsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingDeprecatedManifestFields.
        /// </summary>
        internal static string AvoidUsingDeprecatedManifestFieldsName {
            get {
                return ResourceManager.GetString("AvoidUsingDeprecatedManifestFieldsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Empty Catch Block.
        /// </summary>
        internal static string AvoidUsingEmptyCatchBlockCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingEmptyCatchBlockCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty catch blocks are considered poor design decisions because if an error occurs in the try block, this error is simply swallowed and not acted upon. While this does not inherently lead to bad things. It can and this should be avoided if possible. To fix a violation of this rule, using Write-Error or throw statements in catch blocks..
        /// </summary>
        internal static string AvoidUsingEmptyCatchBlockDescription {
            get {
                return ResourceManager.GetString("AvoidUsingEmptyCatchBlockDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingEmptyCatchBlock.
        /// </summary>
        internal static string AvoidUsingEmptyCatchBlockName {
            get {
                return ResourceManager.GetString("AvoidUsingEmptyCatchBlockName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using File Path.
        /// </summary>
        internal static string AvoidUsingFilePathCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingFilePathCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a rooted file path is used in a script that is published online, this may expose information about your computer. Furthermore, the file path may not work on other computer when they try to use the script..
        /// </summary>
        internal static string AvoidUsingFilePathDescription {
            get {
                return ResourceManager.GetString("AvoidUsingFilePathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file path &apos;{0}&apos; of &apos;{1}&apos; is rooted. This should be avoided if &apos;{1}&apos; is published online..
        /// </summary>
        internal static string AvoidUsingFilePathError {
            get {
                return ResourceManager.GetString("AvoidUsingFilePathError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingFilePath.
        /// </summary>
        internal static string AvoidUsingFilePathName {
            get {
                return ResourceManager.GetString("AvoidUsingFilePathName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Internal URLs.
        /// </summary>
        internal static string AvoidUsingInternalURLsCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Internal URLs in the scripts may cause security problems..
        /// </summary>
        internal static string AvoidUsingInternalURLsDescription {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; could be an internal URL. Using internal URL directly in the script may cause potential information disclosure..
        /// </summary>
        internal static string AvoidUsingInternalURLsError {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingInternalURLs.
        /// </summary>
        internal static string AvoidUsingInternalURLsName {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead..
        /// </summary>
        internal static string AvoidUsingInvokeExpressionError {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Invoke-Expression.
        /// </summary>
        internal static string AvoidUsingInvokeExpressionRuleCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionRuleCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Invoke-Expression cmdlet evaluates or runs a specified string as a command and returns the results of the expression or command. It can be extraordinarily powerful so it is not that you want to never use it but you need to be very careful about using it.  In particular, you are probably on safe ground if the data only comes from the program itself.  If you include any data provided from the user - you need to protect yourself from Code Injection. To fix a violation of this rule, please remove Invoke-Exp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AvoidUsingInvokeExpressionRuleDescription {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionRuleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingInvokeExpression.
        /// </summary>
        internal static string AvoidUsingInvokeExpressionRuleName {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionRuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Plain Text For Password Parameter.
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password parameters that take in plaintext will expose passwords and compromise the security of your system..
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordDescription {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; should use SecureString, otherwise this will expose sensitive information. See ConvertTo-SecureString for more information..
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordError {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingPlainTextForPassword.
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordName {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Positional Parameters.
        /// </summary>
        internal static string AvoidUsingPositionalParametersCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Readability and clarity should be the goal of any script we expect to maintain over time. When calling a command that takes parameters, where possible consider using name parameters as opposed to positional parameters. To fix a violation of this rule, please use named parameters instead of positional parameters when calling a command..
        /// </summary>
        internal static string AvoidUsingPositionalParametersDescription {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet &apos;{0}&apos; has positional parameter. Please use named parameters instead of positional parameters when calling a command..
        /// </summary>
        internal static string AvoidUsingPositionalParametersError {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingPositionalParameters.
        /// </summary>
        internal static string AvoidUsingPositionalParametersName {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Get-WMIObject, Remove-WMIObject, Invoke-WmiMethod, Register-WmiEvent, Set-WmiInstance.
        /// </summary>
        internal static string AvoidUsingWMICmdletCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deprecated. Starting in Windows PowerShell 3.0, these cmdlets have been superseded by CIM cmdlets..
        /// </summary>
        internal static string AvoidUsingWMICmdletDescription {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems..
        /// </summary>
        internal static string AvoidUsingWMICmdletError {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingWMICmdlet.
        /// </summary>
        internal static string AvoidUsingWMICmdletName {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Write-Host.
        /// </summary>
        internal static string AvoidUsingWriteHostCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write-Host or Console.Write should not be used because it may not work in some hosts or there may even be no hosts at all. Use Write-Output instead..
        /// </summary>
        internal static string AvoidUsingWriteHostDescription {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses Write-Host. This is not recommended because it may not work in some hosts or there may even be no hosts at all. Use Write-Output instead..
        /// </summary>
        internal static string AvoidUsingWriteHostError {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingWriteHost.
        /// </summary>
        internal static string AvoidUsingWriteHostName {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command Not Found.
        /// </summary>
        internal static string CommandNotFoundCommonName {
            get {
                return ResourceManager.GetString("CommandNotFoundCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands that are undefined or do not exist should not be used..
        /// </summary>
        internal static string CommandNotFoundDescription {
            get {
                return ResourceManager.GetString("CommandNotFoundDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command &apos;{0}&apos; Is Not Found.
        /// </summary>
        internal static string CommandNotFoundError {
            get {
                return ResourceManager.GetString("CommandNotFoundError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CommandNotFound.
        /// </summary>
        internal static string CommandNotFoundName {
            get {
                return ResourceManager.GetString("CommandNotFoundName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DscExamplesPresent.
        /// </summary>
        internal static string DscExamplesPresent {
            get {
                return ResourceManager.GetString("DscExamplesPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSC examples are present.
        /// </summary>
        internal static string DscExamplesPresentCommonName {
            get {
                return ResourceManager.GetString("DscExamplesPresentCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Every DSC resource module should contain folder &quot;Examples&quot; with sample configurations for every resource. Sample configurations should have resource name they are demonstrating in the title..
        /// </summary>
        internal static string DscExamplesPresentDescription {
            get {
                return ResourceManager.GetString("DscExamplesPresentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No examples found for resource &apos;{0}&apos;.
        /// </summary>
        internal static string DscExamplesPresentNoExamplesError {
            get {
                return ResourceManager.GetString("DscExamplesPresentNoExamplesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PSDSC.
        /// </summary>
        internal static string DSCSourceName {
            get {
                return ResourceManager.GetString("DSCSourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DscTestsPresent.
        /// </summary>
        internal static string DscTestsPresent {
            get {
                return ResourceManager.GetString("DscTestsPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dsc tests are present.
        /// </summary>
        internal static string DscTestsPresentCommonName {
            get {
                return ResourceManager.GetString("DscTestsPresentCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Every DSC resource module should contain folder &quot;Tests&quot; with tests for every resource. Test scripts should have resource name they are testing in the file name..
        /// </summary>
        internal static string DscTestsPresentDescription {
            get {
                return ResourceManager.GetString("DscTestsPresentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No tests found for resource &apos;{0}&apos;.
        /// </summary>
        internal static string DscTestsPresentNoTestsError {
            get {
                return ResourceManager.GetString("DscTestsPresentNoTestsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module Manifest Fields.
        /// </summary>
        internal static string MissingModuleManifestFieldCommonName {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some fields of the module manifest (such as ModuleVersion) are required..
        /// </summary>
        internal static string MissingModuleManifestFieldDescription {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MissingModuleManifestField.
        /// </summary>
        internal static string MissingModuleManifestFieldName {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}.
        /// </summary>
        internal static string NameSpaceFormat {
            get {
                return ResourceManager.GetString("NameSpaceFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all code path in {0} function in DSC Class {1} returns a value.
        /// </summary>
        internal static string NotAllCodePathReturnsDSCFunctionsError {
            get {
                return ResourceManager.GetString("NotAllCodePathReturnsDSCFunctionsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process null Ast.
        /// </summary>
        internal static string NullAstErrorMessage {
            get {
                return ResourceManager.GetString("NullAstErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process null CommandInfo.
        /// </summary>
        internal static string NullCommandInfoError {
            get {
                return ResourceManager.GetString("NullCommandInfoError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Message is Null..
        /// </summary>
        internal static string NullErrorMessage {
            get {
                return ResourceManager.GetString("NullErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One Char.
        /// </summary>
        internal static string OneCharCommonName {
            get {
                return ResourceManager.GetString("OneCharCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that cmdlets and parameters have more than one character..
        /// </summary>
        internal static string OneCharDescription {
            get {
                return ResourceManager.GetString("OneCharDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet name &apos;{0}&apos; only has one character..
        /// </summary>
        internal static string OneCharErrorCmdlet {
            get {
                return ResourceManager.GetString("OneCharErrorCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; has a parameter &apos;{1}&apos; that only has one character..
        /// </summary>
        internal static string OneCharErrorParameter {
            get {
                return ResourceManager.GetString("OneCharErrorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A script block has a parameter &apos;{0}&apos; that only has one character..
        /// </summary>
        internal static string OneCharErrorParameterSB {
            get {
                return ResourceManager.GetString("OneCharErrorParameterSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OneChar.
        /// </summary>
        internal static string OneCharName {
            get {
                return ResourceManager.GetString("OneCharName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null Comparison.
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullCommonName {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that $null is on the left side of any equaltiy comparisons (eq, ne, ceq, cne, ieq, ine). When there is an array on the left side of a null equality comparison, PowerShell will check for a $null IN the array rather than if the array is null. If the two sides of the comaprision are switched this is fixed. Therefore, $null should always be on the left side of equality comparisons just in case..
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullDescription {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $null should be on the left side of equality comparisons..
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullError {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PossibleIncorrectComparisonWithNull.
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullName {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Basic Comment Help.
        /// </summary>
        internal static string ProvideCommentHelpCommonName {
            get {
                return ResourceManager.GetString("ProvideCommentHelpCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that all cmdlets have a help comment. This rule only checks existence. It does not check the content of the comment..
        /// </summary>
        internal static string ProvideCommentHelpDescription {
            get {
                return ResourceManager.GetString("ProvideCommentHelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; does not have a help comment..
        /// </summary>
        internal static string ProvideCommentHelpError {
            get {
                return ResourceManager.GetString("ProvideCommentHelpError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ProvideCommentHelp.
        /// </summary>
        internal static string ProvideCommentHelpName {
            get {
                return ResourceManager.GetString("ProvideCommentHelpName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Parameter Values.
        /// </summary>
        internal static string ProvideDefaultParameterValueCommonName {
            get {
                return ResourceManager.GetString("ProvideDefaultParameterValueCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters must have a default value. To fix a violation of this rule, please specify a default value for all parameters.
        /// </summary>
        internal static string ProvideDefaultParameterValueDescription {
            get {
                return ResourceManager.GetString("ProvideDefaultParameterValueDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is not initialized. Parameters must have a default value. To fix a violation of this rule, please specify a default value for all parameters.
        /// </summary>
        internal static string ProvideDefaultParameterValueError {
            get {
                return ResourceManager.GetString("ProvideDefaultParameterValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ProvideDefaultParameterValue.
        /// </summary>
        internal static string ProvideDefaultParameterValueName {
            get {
                return ResourceManager.GetString("ProvideDefaultParameterValueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved Cmdlet Chars.
        /// </summary>
        internal static string ReservedCmdletCharCommonName {
            get {
                return ResourceManager.GetString("ReservedCmdletCharCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks for reserved characters in cmdlet names. These characters usually cause a parsing error. Otherwise they will generally cause runtime errors..
        /// </summary>
        internal static string ReservedCmdletCharDescription {
            get {
                return ResourceManager.GetString("ReservedCmdletCharDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; uses a reserved char in its name..
        /// </summary>
        internal static string ReservedCmdletCharError {
            get {
                return ResourceManager.GetString("ReservedCmdletCharError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReservedCmdletChar.
        /// </summary>
        internal static string ReservedCmdletCharName {
            get {
                return ResourceManager.GetString("ReservedCmdletCharName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos;.
        /// </summary>
        internal static string ReservedParamsCmdletPrefix {
            get {
                return ResourceManager.GetString("ReservedParamsCmdletPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved Parameters.
        /// </summary>
        internal static string ReservedParamsCommonName {
            get {
                return ResourceManager.GetString("ReservedParamsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks for reserved parameters in function definitions. If these parameters are defined by the user, an error generally occurs..
        /// </summary>
        internal static string ReservedParamsDescription {
            get {
                return ResourceManager.GetString("ReservedParamsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; defines the reserved common parameter &apos;{1}&apos;..
        /// </summary>
        internal static string ReservedParamsError {
            get {
                return ResourceManager.GetString("ReservedParamsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReservedParams.
        /// </summary>
        internal static string ReservedParamsName {
            get {
                return ResourceManager.GetString("ReservedParamsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script.
        /// </summary>
        internal static string ReservedParamsScriptPrefix {
            get {
                return ResourceManager.GetString("ReservedParamsScriptPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #,(){}[]&amp;/\\$^;:\&quot;&apos;&lt;&gt;|?@`*%+=~.
        /// </summary>
        internal static string ReserverCmdletChars {
            get {
                return ResourceManager.GetString("ReserverCmdletChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReturnCorrectTypesForDSCFunctions.
        /// </summary>
        internal static string ReturnCorrectTypeDSCFunctionsName {
            get {
                return ResourceManager.GetString("ReturnCorrectTypeDSCFunctionsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return Correct Types For DSC Functions.
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsCommonName {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set function in DSC class and Set-TargetResource in DSC resource must not return anything. Get function in DSC class must return an instance of the DSC class and Get-TargetResource function in DSC resource must return a hashtable. Test function in DSC class and Get-TargetResource function in DSC resource must return a boolean..
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsDescription {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} function in DSC Class {1} should return object of type {2}.
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsNoTypeError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsNoTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} function in DSC Class {1} should return object of type {2} instead of type {3}.
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsWrongTypeError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsWrongTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} function in DSC Resource should return object of type {1} instead of {2}.
        /// </summary>
        internal static string ReturnCorrectTypesForGetTestTargetResourceFunctionsDSCResourceError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForGetTestTargetResourceFunctionsDSCResourceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set function in DSC Class {0} should not return anything.
        /// </summary>
        internal static string ReturnCorrectTypesForSetFunctionsDSCError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForSetFunctionsDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-TargetResource function in DSC Resource should not output anything to the pipeline..
        /// </summary>
        internal static string ReturnCorrectTypesForSetTargetResourceFunctionsDSCError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForSetTargetResourceFunctionsDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to www.sharepoint.com.
        /// </summary>
        internal static string SharepointURL {
            get {
                return ResourceManager.GetString("SharepointURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Should Process.
        /// </summary>
        internal static string ShouldProcessCommonName {
            get {
                return ResourceManager.GetString("ShouldProcessCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that if the SupportsShouldProcess is present, the function calls ShouldProcess/ShouldContinue and vice versa. Scripts with one or the other but not both will generally run into an error or unexpected behavior..
        /// </summary>
        internal static string ShouldProcessDescription {
            get {
                return ResourceManager.GetString("ShouldProcessDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has the ShouldProcess attribute but does not call ShouldProcess/ShouldContinue..
        /// </summary>
        internal static string ShouldProcessErrorHasAttribute {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A script block has the ShouldProcess attribute but does not call ShouldProcess/ShouldContinue..
        /// </summary>
        internal static string ShouldProcessErrorHasAttributeSB {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasAttributeSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; calls ShouldProcess/ShouldContinue but does not have the ShouldProcess attribute..
        /// </summary>
        internal static string ShouldProcessErrorHasCmdlet {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A script block calls ShouldProcess/ShouldContinue but does not have the ShouldProcess attribute..
        /// </summary>
        internal static string ShouldProcessErrorHasCmdletSB {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasCmdletSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShouldProcess.
        /// </summary>
        internal static string ShouldProcessName {
            get {
                return ResourceManager.GetString("ShouldProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PS.
        /// </summary>
        internal static string SourceName {
            get {
                return ResourceManager.GetString("SourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type Not Found.
        /// </summary>
        internal static string TypeNotFoundCommonName {
            get {
                return ResourceManager.GetString("TypeNotFoundCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Undefined type should not be used.
        /// </summary>
        internal static string TypeNotFoundDescription {
            get {
                return ResourceManager.GetString("TypeNotFoundDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is not found. Please check that it is defined..
        /// </summary>
        internal static string TypeNotFoundError {
            get {
                return ResourceManager.GetString("TypeNotFoundError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TypeNotFound.
        /// </summary>
        internal static string TypeNotFoundName {
            get {
                return ResourceManager.GetString("TypeNotFoundName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet Verbs.
        /// </summary>
        internal static string UseApprovedVerbsCommonName {
            get {
                return ResourceManager.GetString("UseApprovedVerbsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that all defined cmdlets use approved verbs. This is in line with PowerShell&apos;s best practices..
        /// </summary>
        internal static string UseApprovedVerbsDescription {
            get {
                return ResourceManager.GetString("UseApprovedVerbsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; uses an unapproved verb..
        /// </summary>
        internal static string UseApprovedVerbsError {
            get {
                return ResourceManager.GetString("UseApprovedVerbsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseApprovedVerbs.
        /// </summary>
        internal static string UseApprovedVerbsName {
            get {
                return ResourceManager.GetString("UseApprovedVerbsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use BOM encoding for non-ASCII files.
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileCommonName {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For a file encoded with a format other than ASCII, ensure BOM is present to ensure that any application consuming this file can interpret it correctly..
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileDescription {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing BOM encoding for non-ASCII encoded file &apos;{0}&apos;.
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileError {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseBOMForUnicodeEncodedFile.
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileName {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Cmdlet Correctly.
        /// </summary>
        internal static string UseCmdletCorrectlyCommonName {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet should be called with the mandatory parameters..
        /// </summary>
        internal static string UseCmdletCorrectlyDescription {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet &apos;{0}&apos; may be used incorrectly. Please check that all mandatory parameters are supplied..
        /// </summary>
        internal static string UseCmdletCorrectlyError {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCmdletCorrectly.
        /// </summary>
        internal static string UseCmdletCorrectlyName {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra Variables.
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsCommonName {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that variables are used in more than just their assignment. Generally this is a red flag that a variable is not needed. This rule does not check if the assignment and usage are in the same function..
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsDescription {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; is assigned but never used..
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsError {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseDeclaredVarsMoreThanAssigments.
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsName {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use identical mandatory parameters for DSC Get/Test/Set TargetResource functions.
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCCommonName {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Get/Test/Set TargetResource functions of DSC resource must have the same mandatory parameters..
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCDescription {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mandatory parameter &apos;{0}&apos; is not present in &apos;{1}&apos; DSC resource function(s)..
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCError {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseIdenticalMandatoryParametersForDSC.
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCName {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Identical Parameters For DSC Test and Set Functions.
        /// </summary>
        internal static string UseIdenticalParametersDSCCommonName {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Test and Set-TargetResource functions of DSC Resource must have the same parameters..
        /// </summary>
        internal static string UseIdenticalParametersDSCDescription {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Test and Set-TargetResource functions of DSC Resource must have the same parameters..
        /// </summary>
        internal static string UseIdenticalParametersDSCError {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseIdenticalParametersForDSC.
        /// </summary>
        internal static string UseIdenticalParametersDSCName {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use OutputType Correctly.
        /// </summary>
        internal static string UseOutputTypeCorrectlyCommonName {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return types of a cmdlet should be declared using the OutputType attribute..
        /// </summary>
        internal static string UseOutputTypeCorrectlyDescription {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; returns an object of type &apos;{1}&apos; but this type is not declared in the OutputType attribute..
        /// </summary>
        internal static string UseOutputTypeCorrectlyError {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseOutputTypeCorrectly.
        /// </summary>
        internal static string UseOutputTypeCorrectlyName {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PSCredential.
        /// </summary>
        internal static string UsePSCredentialTypeCommonName {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that cmdlets that have a Credential parameter accept PSCredential. This comes from the PowerShell teams best practices..
        /// </summary>
        internal static string UsePSCredentialTypeDescription {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Credential parameter in &apos;{0}&apos; must be of the type PSCredential..
        /// </summary>
        internal static string UsePSCredentialTypeError {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Credential parameter in a found script block must be of the type PSCredential..
        /// </summary>
        internal static string UsePSCredentialTypeErrorSB {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeErrorSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UsePSCredentialType.
        /// </summary>
        internal static string UsePSCredentialTypeName {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use ShouldProcess For State Changing Functions.
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsCommonName {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions that have verbs like New, Start, Stop, Set, Reset, Restart that change system state should support &apos;ShouldProcess&apos;..
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsDescrption {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsDescrption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function ’{0}’ has verb that could change system state. Therefore, the function has to support &apos;ShouldProcess&apos;..
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsError {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseShouldProcessForStateChangingFunctions.
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsName {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet Singular Noun.
        /// </summary>
        internal static string UseSingularNounsCommonName {
            get {
                return ResourceManager.GetString("UseSingularNounsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet should use singular instead of plural nouns..
        /// </summary>
        internal static string UseSingularNounsDescription {
            get {
                return ResourceManager.GetString("UseSingularNounsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; uses a plural noun. A singular noun should be used instead..
        /// </summary>
        internal static string UseSingularNounsError {
            get {
                return ResourceManager.GetString("UseSingularNounsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseSingularNouns.
        /// </summary>
        internal static string UseSingularNounsName {
            get {
                return ResourceManager.GetString("UseSingularNounsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;{0}&apos; function. DSC Class must implement Get, Set and Test functions..
        /// </summary>
        internal static string UseStandardDSCFunctionsInClassError {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInClassError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Standard Get/Set/Test TargetResource functions in DSC Resource .
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceCommonName {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSC Resource must implement Get, Set and Test-TargetResource functions. DSC Class must implement Get, Set and Test functions..
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceDescription {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;{0}&apos; function. DSC Resource must implement Get, Set and Test-TargetResource functions..
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceError {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StandardDSCFunctionsInResource.
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceName {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Type At Variable Assignment.
        /// </summary>
        internal static string UseTypeAtVariableAssignmentCommonName {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should be specified at variable assignments to maintain readability and maintainability of script..
        /// </summary>
        internal static string UseTypeAtVariableAssignmentDescription {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify type at the assignment of variable &apos;{0}&apos;.
        /// </summary>
        internal static string UseTypeAtVariableAssignmentError {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseTypeAtVariableAssignment.
        /// </summary>
        internal static string UseTypeAtVariableAssignmentName {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use UTF8 Encoding For Help File.
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileCommonName {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PowerShell help file needs to use UTF8 Encoding..
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileDescription {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File {0} has to use UTF8 instead of {1} encoding because it is a powershell help file..
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileError {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseUTF8EncodingForHelpFile.
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileName {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use verbose message in DSC resource.
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceCommonName {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is a best practice to emit informative, verbose messages in DSC resource functions. This helps in debugging issues when a DSC configuration is executed..
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceDescription {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no call to Write-Verbose in DSC function ‘{0}’. If you are using Write-Verbose in a helper function, suppress this rule application..
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceErrorFunction {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceErrorFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseVerboseMessageInDSCResource.
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceName {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceName", resourceCulture);
            }
        }
    }
}
