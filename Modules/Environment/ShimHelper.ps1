<#
.SYNOPSIS
Properties of a shim file (generated with chocolatey's shimgen)

.DESCRIPTION
Retrieves the properties of files generated with shimgen.
Shimgen is a utility distributed with Chocolatey that creates
program redirections (e.g. to allow executables to be discoverable
from a standard path and keep the real binaries in their proper place).
It does a  a similar job to symbolic links (or, the use of a batch file),
but with less problems.

.PARAMETER ProgramName
The name of the program whose properties should be retrieved.
This should be indeed a shim executable, because we will execute the program.
Some provision are taking place to avoid executing programs that are obviously
not shims, but it is not guaranteed.

.EXAMPLE
Get the properties of program es.exe:
  Get-ShimProperties -ProgramName es

.NOTES
Running this function with executables that are not known to be shims
may be dangerous.
#>
function Get-ShimProperties {
    [CmdletBinding()]
    param(
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            $command = Get-Command -Name $_ -ErrorAction SilentlyContinue
            $command -ne $null
        })]
        [string]
        $ProgramName
    )

    $command = Get-Command -Name $ProgramName
    $commandItem = Get-Item -Path $command.Path
    # if ($commandItem.Length -gt 40000) {
    #     Write-Warning -Message "Program '$ProgramName' does not appear to be a shim"
    #     return
    # }

    Write-Verbose -Message "Executing program '$ProgramName' with argument 'shimgen-help'"
    Invoke-Command -ScriptBlock { . $ProgramName shimgen-help -ErrorAction SilentlyContinue } -ErrorVariable shimerror -OutVariable result -ErrorAction SilentlyContinue | Out-Null

    if (-not [string]::IsNullOrWhiteSpace($shimerror)) {
        Write-Warning -Message "Program '$ProgramName' is not a shim"
        return
    }

    if (-not ($result.Contains("This is a shim, generated by Chocolatey's ShimGenerator (shimgen)."))) {
        Write-Warning -Message "This is not a shim"
        return
    }

    $target = [regex]" Target: '(?<Target>.*)'\s+Target exists.*GUI: '(?<Gui>False|True)'.* Wait for exit: '(?<WaitForExit>False|True)'"
    $m = $target.Match($result, [System.Text.RegularExpressions.RegexOptions]::MultiLine)
    if ($m.Success) {
        [PSCustomObject]@{
            'Path' = $m.Groups['Target'].Value
            'IsGui' = $m.Groups['Gui'].Value -eq "True"
            'ShouldWaitForExit' = $m.Groups['WaitForExit'].Value -eq "True"
        }

    } else {
        Write-Warning -Message "Program '$ProgramName' is not a shim"
        return
    }
}